/**
  *  Copyright 2016 Alexander Terenin
  *
  *  Licensed under the Apache License, Version 2.0 (the "License")
  *  you may not use this file except in compliance with the License.
  *  You may obtain a copy of the License at
  *
  *  http://www.apache.org/licenses/LICENSE-2.0
  *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  * /
  */

package waterfall

import jcuda.driver.CUresult._
import jcuda.jcublas.cublasStatus._
import jcuda.jcurand.curandStatus._
import jcuda.jcusolver.cusolverStatus._
import jcuda.jcublas.cublasOperation.{CUBLAS_OP_N,CUBLAS_OP_T}

object Implicits {


  implicit class HostMatrixImplicits(a: Array[Array[Float]]) {
    def toColumnMajorArray = a.transpose.flatten
  }

  implicit class HostArrayImplicits(a: Array[Float]) {

  }

  implicit class TransposeImplicits(b: Boolean) {
    def toTransposeOp = b match {
      case false => CUBLAS_OP_N
      case true => CUBLAS_OP_T
    }
  }

  implicit class DebugImplicits(i: Int) {
    def checkJCublasStatus() = {
      if(i != CUBLAS_STATUS_SUCCESS) {
        val failType = i match {
          case CUBLAS_STATUS_ALLOC_FAILED => "CUBLAS_STATUS_ALLOC_FAILED"
          case CUBLAS_STATUS_ARCH_MISMATCH => "CUBLAS_STATUS_ARCH_MISMATCH"
          case CUBLAS_STATUS_EXECUTION_FAILED => "CUBLAS_STATUS_EXECUTION_FAILED"
          case CUBLAS_STATUS_INTERNAL_ERROR => "CUBLAS_STATUS_INTERNAL_ERROR"
          case CUBLAS_STATUS_INVALID_VALUE => "CUBLAS_STATUS_INVALID_VALUE"
          case CUBLAS_STATUS_MAPPING_ERROR => "CUBLAS_STATUS_MAPPING_ERROR"
          case CUBLAS_STATUS_NOT_INITIALIZED => "CUBLAS_STATUS_NOT_INITIALIZED"
          case CUBLAS_STATUS_NOT_SUPPORTED => "CUBLAS_STATUS_NOT_SUPPORTED"
          case JCUBLAS_STATUS_INTERNAL_ERROR => "JCUBLAS_STATUS_INTERNAL_ERROR"
        }
        throw new Exception(failType)
      }
    }

    def checkJCusolverStatus() = {
      if(i != CUSOLVER_STATUS_SUCCESS) {
        val failType = i match {
          case CUSOLVER_STATUS_ALLOC_FAILED => "CUSOLVER_STATUS_ALLOC_FAILED"
          case CUSOLVER_STATUS_ARCH_MISMATCH => "CUSOLVER_STATUS_ARCH_MISMATCH"
          case CUSOLVER_STATUS_EXECUTION_FAILED => "CUSOLVER_STATUS_EXECUTION_FAILED"
          case CUSOLVER_STATUS_INTERNAL_ERROR => "CUSOLVER_STATUS_INTERNAL_ERROR"
          case CUSOLVER_STATUS_INVALID_LICENSE => "CUSOLVER_STATUS_INVALID_LICENSE"
          case CUSOLVER_STATUS_INVALID_VALUE => "CUSOLVER_STATUS_INVALID_VALUE"
          case CUSOLVER_STATUS_MAPPING_ERROR => "CUSOLVER_STATUS_MAPPING_ERROR"
          case CUSOLVER_STATUS_MATRIX_TYPE_NOT_SUPPORTED => "CUSOLVER_STATUS_MATRIX_TYPE_NOT_SUPPORTED"
          case CUSOLVER_STATUS_NOT_INITIALIZED => "CUSOLVER_STATUS_NOT_INITIALIZED"
          case CUSOLVER_STATUS_NOT_SUPPORTED => "CUSOLVER_STATUS_NOT_SUPPORTED"
          case CUSOLVER_STATUS_ZERO_PIVOT => "CUSOLVER_STATUS_ZERO_PIVOT"
        }
        throw new Exception(failType)
      }
    }

    def checkJCurandStatus() = {
      if(i != CURAND_STATUS_SUCCESS) {
        val failType = i match {
          case CURAND_STATUS_ALLOCATION_FAILED => "CURAND_STATUS_ALLOCATION_FAILED"
          case CURAND_STATUS_ARCH_MISMATCH => "CURAND_STATUS_ARCH_MISMATCH"
          case CURAND_STATUS_DOUBLE_PRECISION_REQUIRED => "CURAND_STATUS_DOUBLE_PRECISION_REQUIRED"
          case CURAND_STATUS_INITIALIZATION_FAILED => "CURAND_STATUS_INITIALIZATION_FAILED"
          case CURAND_STATUS_INTERNAL_ERROR => "CURAND_STATUS_INTERNAL_ERROR"
          case CURAND_STATUS_LAUNCH_FAILURE => "CURAND_STATUS_LAUNCH_FAILURE"
          case CURAND_STATUS_LENGTH_NOT_MULTIPLE => "CURAND_STATUS_LENGTH_NOT_MULTIPLE"
          case CURAND_STATUS_NOT_INITIALIZED => "CURAND_STATUS_NOT_INITIALIZED"
          case CURAND_STATUS_OUT_OF_RANGE => "CURAND_STATUS_OUT_OF_RANGE"
          case CURAND_STATUS_PREEXISTING_FAILURE => "CURAND_STATUS_PREEXISTING_FAILURE"
          case CURAND_STATUS_TYPE_ERROR => "CURAND_STATUS_TYPE_ERROR"
          case CURAND_STATUS_VERSION_MISMATCH => "CURAND_STATUS_VERSION_MISMATCH"
        }
        throw new Exception(failType)
      }
    }

    def checkJCudaStatus() = {
      if(i != CUDA_SUCCESS){
        val failType = i match {
          case CUDA_ERROR_INVALID_VALUE => "CUDA_ERROR_INVALID_VALUE"
          case CUDA_ERROR_OUT_OF_MEMORY => "CUDA_ERROR_OUT_OF_MEMORY"
          case CUDA_ERROR_NOT_INITIALIZED => "CUDA_ERROR_NOT_INITIALIZED"
          case CUDA_ERROR_DEINITIALIZED => "CUDA_ERROR_DEINITIALIZED"
          case CUDA_ERROR_PROFILER_DISABLED => "CUDA_ERROR_PROFILER_DISABLED"
          case CUDA_ERROR_NO_DEVICE => "CUDA_ERROR_NO_DEVICE"
          case CUDA_ERROR_INVALID_DEVICE => "CUDA_ERROR_INVALID_DEVICE"
          case CUDA_ERROR_INVALID_IMAGE => "CUDA_ERROR_INVALID_IMAGE"
          case CUDA_ERROR_INVALID_CONTEXT => "CUDA_ERROR_INVALID_CONTEXT"
          case CUDA_ERROR_CONTEXT_ALREADY_CURRENT => "CUDA_ERROR_CONTEXT_ALREADY_CURRENT"
          case CUDA_ERROR_MAP_FAILED => "CUDA_ERROR_MAP_FAILED"
          case CUDA_ERROR_UNMAP_FAILED => "CUDA_ERROR_UNMAP_FAILED"
          case CUDA_ERROR_ARRAY_IS_MAPPED => "CUDA_ERROR_ARRAY_IS_MAPPED"
          case CUDA_ERROR_ALREADY_MAPPED => "CUDA_ERROR_ALREADY_MAPPED"
          case CUDA_ERROR_NO_BINARY_FOR_GPU => "CUDA_ERROR_NO_BINARY_FOR_GPU"
          case CUDA_ERROR_ALREADY_ACQUIRED => "CUDA_ERROR_ALREADY_ACQUIRED"
          case CUDA_ERROR_NOT_MAPPED => "CUDA_ERROR_NOT_MAPPED"
          case CUDA_ERROR_NOT_MAPPED_AS_ARRAY => "CUDA_ERROR_NOT_MAPPED_AS_ARRAY"
          case CUDA_ERROR_NOT_MAPPED_AS_POINTER => "CUDA_ERROR_NOT_MAPPED_AS_POINTER"
          case CUDA_ERROR_ECC_UNCORRECTABLE => "CUDA_ERROR_ECC_UNCORRECTABLE"
          case CUDA_ERROR_UNSUPPORTED_LIMIT => "CUDA_ERROR_UNSUPPORTED_LIMIT"
          case CUDA_ERROR_CONTEXT_ALREADY_IN_USE => "CUDA_ERROR_CONTEXT_ALREADY_IN_USE"
          case CUDA_ERROR_PEER_ACCESS_UNSUPPORTED => "CUDA_ERROR_PEER_ACCESS_UNSUPPORTED"
          case CUDA_ERROR_INVALID_PTX => "CUDA_ERROR_INVALID_PTX"
          case CUDA_ERROR_INVALID_GRAPHICS_CONTEXT => "CUDA_ERROR_INVALID_GRAPHICS_CONTEXT";
          case CUDA_ERROR_INVALID_SOURCE => "CUDA_ERROR_INVALID_SOURCE"
          case CUDA_ERROR_FILE_NOT_FOUND => "CUDA_ERROR_FILE_NOT_FOUND"
          case CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND => "CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND"
          case CUDA_ERROR_SHARED_OBJECT_INIT_FAILED => "CUDA_ERROR_SHARED_OBJECT_INIT_FAILED"
          case CUDA_ERROR_OPERATING_SYSTEM => "CUDA_ERROR_OPERATING_SYSTEM"
          case CUDA_ERROR_INVALID_HANDLE => "CUDA_ERROR_INVALID_HANDLE"
          case CUDA_ERROR_NOT_FOUND => "CUDA_ERROR_NOT_FOUND"
          case CUDA_ERROR_NOT_READY => "CUDA_ERROR_NOT_READY"
          case CUDA_ERROR_ILLEGAL_ADDRESS => "CUDA_ERROR_ILLEGAL_ADDRESS"
          case CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES => "CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES"
          case CUDA_ERROR_LAUNCH_TIMEOUT => "CUDA_ERROR_LAUNCH_TIMEOUT"
          case CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING => "CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING"
          case CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED => "CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED"
          case CUDA_ERROR_PEER_ACCESS_NOT_ENABLED => "CUDA_ERROR_PEER_ACCESS_NOT_ENABLED"
          case CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE => "CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE"
          case CUDA_ERROR_CONTEXT_IS_DESTROYED => "CUDA_ERROR_CONTEXT_IS_DESTROYED"
          case CUDA_ERROR_ASSERT => "CUDA_ERROR_ASSERT"
          case CUDA_ERROR_TOO_MANY_PEERS => "CUDA_ERROR_TOO_MANY_PEERS"
          case CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED => "CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED"
          case CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED => "CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED"
          case CUDA_ERROR_HARDWARE_STACK_ERROR => "CUDA_ERROR_HARDWARE_STACK_ERROR"
          case CUDA_ERROR_ILLEGAL_INSTRUCTION => "CUDA_ERROR_ILLEGAL_INSTRUCTION"
          case CUDA_ERROR_MISALIGNED_ADDRESS => "CUDA_ERROR_MISALIGNED_ADDRESS"
          case CUDA_ERROR_INVALID_ADDRESS_SPACE => "CUDA_ERROR_INVALID_ADDRESS_SPACE"
          case CUDA_ERROR_INVALID_PC => "CUDA_ERROR_INVALID_PC"
          case CUDA_ERROR_LAUNCH_FAILED => "CUDA_ERROR_LAUNCH_FAILED"
          case CUDA_ERROR_NOT_PERMITTED => "CUDA_ERROR_NOT_PERMITTED"
          case CUDA_ERROR_NOT_SUPPORTED => "CUDA_ERROR_NOT_SUPPORTED"
          case CUDA_ERROR_UNKNOWN => "CUDA_ERROR_UNKNOWN"
        }
        throw new Exception(failType)
      }
    }
  }

}
